package typed

// generated by github.com/solsw/golinq/typed/typedgen utility

import (
	"reflect"

	"github.com/solsw/golinq/common"
	"github.com/solsw/golinq/enumerable"
	"github.com/solsw/golinq/errors"
)

// Slicefloat64 is an alias for []float64.
type Slicefloat64 = []float64

// ElemTofloat64 converts Elem to float64.
// If 'el' is nil, float64's zero value is returned.
func ElemTofloat64(el common.Elem) (float64, error) {
	var r0 float64
	if el == nil {
		return r0, nil
	}
	r, ok := el.(float64)
	if !ok {
		return r0, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(r))
	}
	return r, nil
}

// Slicefloat64ToSlice converts Slicefloat64 to Slice.
func Slicefloat64ToSlice(ts Slicefloat64) common.Slice {
	if ts == nil {
		return nil
	}
	r := make(common.Slice, 0, len(ts))
	for _, t := range ts {
		r = append(r, t)
	}
	return r
}

// Slicefloat64ToEnumerable converts Slicefloat64 to Enumerable.
func Slicefloat64ToEnumerable(ts Slicefloat64) *enumerable.Enumerable {
	return enumerable.NewElems(Slicefloat64ToSlice(ts)...)
}

// SliceToSlicefloat64 converts Slice to Slicefloat64.
func SliceToSlicefloat64(sl common.Slice) (Slicefloat64, error) {
	if sl == nil {
		return nil, nil
	}
	r := make(Slicefloat64, 0, len(sl))
	for _, el := range sl {
		t, ok := el.(float64)
		if !ok {
			return nil, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(t))
		}
		r = append(r, t)
	}
	return r, nil
}

// EnumerableToSlicefloat64 converts Enumerable to Slicefloat64.
func EnumerableToSlicefloat64(en *enumerable.Enumerable) (Slicefloat64, error) {
	return SliceToSlicefloat64(en.Slice())
}

// Eqfloat64 is an Equality for float64.
var Eqfloat64 = func(e1, e2 common.Elem) bool {
	// use the appropiate one or implement your own
	return reflect.DeepEqual(e1, e2)
	// return reflect.DeepEqual(e1.(float64), e2.(float64))
	// return e1.(float64) == e2.(float64)
}

// EqNilfloat64 is an Equality for float64, respecting nil parameters.
var EqNilfloat64 = func(e1, e2 common.Elem) bool {
	if e1 == nil && e2 == nil {
		return true
	}
	if e1 == nil || e2 == nil {
		return false
	}
	return Eqfloat64(e1, e2)
}

// Lessfloat64 is a Less for float64.
var Lessfloat64 = func(e1, e2 common.Elem) bool {
	// usually requires special implementation
	return e1.(float64) < e2.(float64)
}

// LessNilfloat64 is a Less for float64, respecting nil parameters.
var LessNilfloat64 = func(e1, e2 common.Elem) bool {
	// must go first
	if e2 == nil {
		return false
	}
	if e1 == nil {
		return true
	}
	return Lessfloat64(e1, e2)
}

// Cmpfloat64 is a Comparison for float64.
var Cmpfloat64 = common.LessToComparison(Lessfloat64)

// CmpNilfloat64 is a Comparison for float64, respecting nil parameters.
var CmpNilfloat64 = common.LessToComparison(LessNilfloat64)
