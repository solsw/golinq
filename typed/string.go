package typed

// generated by github.com/solsw/golinq/typed/typedgen utility

import (
	"reflect"

	"github.com/solsw/golinq/common"
	"github.com/solsw/golinq/enumerable"
	"github.com/solsw/golinq/errors"
)

// Slicestring is an alias for []string.
type Slicestring = []string

// ElemTostring converts Elem to string.
// If 'el' is nil, string's zero value is returned.
func ElemTostring(el common.Elem) (string, error) {
	var r0 string
	if el == nil {
		return r0, nil
	}
	r, ok := el.(string)
	if !ok {
		return r0, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(r))
	}
	return r, nil
}

// SlicestringToSlice converts Slicestring to Slice.
func SlicestringToSlice(ts Slicestring) common.Slice {
	if ts == nil {
		return nil
	}
	r := make(common.Slice, 0, len(ts))
	for _, t := range ts {
		r = append(r, t)
	}
	return r
}

// SlicestringToEnumerable converts Slicestring to Enumerable.
func SlicestringToEnumerable(ts Slicestring) *enumerable.Enumerable {
	return enumerable.NewElems(SlicestringToSlice(ts)...)
}

// SliceToSlicestring converts Slice to Slicestring.
func SliceToSlicestring(sl common.Slice) (Slicestring, error) {
	if sl == nil {
		return nil, nil
	}
	r := make(Slicestring, 0, len(sl))
	for _, el := range sl {
		t, ok := el.(string)
		if !ok {
			return nil, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(t))
		}
		r = append(r, t)
	}
	return r, nil
}

// EnumerableToSlicestring converts Enumerable to Slicestring.
func EnumerableToSlicestring(en *enumerable.Enumerable) (Slicestring, error) {
	return SliceToSlicestring(en.Slice())
}

// Eqstring is an Equality for string.
var Eqstring = func(e1, e2 common.Elem) bool {
	// use the appropiate one or implement your own
	return reflect.DeepEqual(e1, e2)
	// return reflect.DeepEqual(e1.(string), e2.(string))
	// return e1.(string) == e2.(string)
}

// EqNilstring is an Equality for string, respecting nil parameters.
var EqNilstring = func(e1, e2 common.Elem) bool {
	if e1 == nil && e2 == nil {
		return true
	}
	if e1 == nil || e2 == nil {
		return false
	}
	return Eqstring(e1, e2)
}

// Lessstring is a Less for string.
var Lessstring = func(e1, e2 common.Elem) bool {
	// usually requires special implementation
	return e1.(string) < e2.(string)
}

// LessNilstring is a Less for string, respecting nil parameters.
var LessNilstring = func(e1, e2 common.Elem) bool {
	// must go first
	if e2 == nil {
		return false
	}
	if e1 == nil {
		return true
	}
	return Lessstring(e1, e2)
}

// Cmpstring is a Comparison for string.
var Cmpstring = common.LessToComparison(Lessstring)

// CmpNilstring is a Comparison for string, respecting nil parameters.
var CmpNilstring = common.LessToComparison(LessNilstring)
