package main

// generated by github.com/solsw/golinq/typed/typedgen utility

import (
	"reflect"

	"github.com/solsw/golinq/common"
	"github.com/solsw/golinq/enumerable"
	"github.com/solsw/golinq/errors"
)

// Slicepet is an alias for []pet.
type Slicepet = []pet

// ElemTopet converts Elem to pet.
// If 'el' is nil, pet's zero value is returned.
func ElemTopet(el common.Elem) (pet, error) {
	var r0 pet
	if el == nil {
		return r0, nil
	}
	r, ok := el.(pet)
	if !ok {
		return r0, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(r))
	}
	return r, nil
}

// SlicepetToSlice converts Slicepet to Slice.
func SlicepetToSlice(ts Slicepet) common.Slice {
	if ts == nil {
		return nil
	}
	r := make(common.Slice, 0, len(ts))
	for _, t := range ts {
		r = append(r, t)
	}
	return r
}

// SlicepetToEnumerable converts Slicepet to Enumerable.
func SlicepetToEnumerable(ts Slicepet) *enumerable.Enumerable {
	return enumerable.NewElems(SlicepetToSlice(ts)...)
}

// SliceToSlicepet converts Slice to Slicepet.
func SliceToSlicepet(sl common.Slice) (Slicepet, error) {
	if sl == nil {
		return nil, nil
	}
	r := make(Slicepet, 0, len(sl))
	for _, el := range sl {
		t, ok := el.(pet)
		if !ok {
			return nil, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(t))
		}
		r = append(r, t)
	}
	return r, nil
}

// EnumerableToSlicepet converts Enumerable to Slicepet.
func EnumerableToSlicepet(en *enumerable.Enumerable) (Slicepet, error) {
	return SliceToSlicepet(en.Slice())
}

// Eqpet is an Equality for pet.
var Eqpet = func(e1, e2 common.Elem) bool {
	// use the appropiate one or implement your own
	return reflect.DeepEqual(e1, e2)
	// return reflect.DeepEqual(e1.(pet), e2.(pet))
	// return e1.(pet) == e2.(pet)
}

// EqNilpet is an Equality for pet, respecting nil parameters.
var EqNilpet = func(e1, e2 common.Elem) bool {
	if e1 == nil && e2 == nil {
		return true
	}
	if e1 == nil || e2 == nil {
		return false
	}
	return Eqpet(e1, e2)
}
