package main

// generated by github.com/solsw/golinq/typed/typedgen utility

import (
	"reflect"

	"github.com/solsw/golinq/common"
	"github.com/solsw/golinq/enumerable"
	"github.com/solsw/golinq/errors"
)

// Slicepackag is an alias for []packag.
type Slicepackag = []packag

// ElemTopackag converts Elem to packag.
// If 'el' is nil, packag's zero value is returned.
func ElemTopackag(el common.Elem) (packag, error) {
	var r0 packag
	if el == nil {
		return r0, nil
	}
	r, ok := el.(packag)
	if !ok {
		return r0, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(r))
	}
	return r, nil
}

// SlicepackagToSlice converts Slicepackag to Slice.
func SlicepackagToSlice(ts Slicepackag) common.Slice {
	if ts == nil {
		return nil
	}
	r := make(common.Slice, 0, len(ts))
	for _, t := range ts {
		r = append(r, t)
	}
	return r
}

// SlicepackagToEnumerable converts Slicepackag to Enumerable.
func SlicepackagToEnumerable(ts Slicepackag) *enumerable.Enumerable {
	return enumerable.NewElems(SlicepackagToSlice(ts)...)
}

// SliceToSlicepackag converts Slice to Slicepackag.
func SliceToSlicepackag(sl common.Slice) (Slicepackag, error) {
	if sl == nil {
		return nil, nil
	}
	r := make(Slicepackag, 0, len(sl))
	for _, el := range sl {
		t, ok := el.(packag)
		if !ok {
			return nil, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(t))
		}
		r = append(r, t)
	}
	return r, nil
}

// EnumerableToSlicepackag converts Enumerable to Slicepackag.
func EnumerableToSlicepackag(en *enumerable.Enumerable) (Slicepackag, error) {
	return SliceToSlicepackag(en.Slice())
}

// Eqpackag is an Equality for packag.
var Eqpackag = func(e1, e2 common.Elem) bool {
	// use the appropiate one or implement your own
	return reflect.DeepEqual(e1, e2)
	// return reflect.DeepEqual(e1.(packag), e2.(packag))
	// return e1.(packag) == e2.(packag)
}

// EqNilpackag is an Equality for packag, respecting nil parameters.
var EqNilpackag = func(e1, e2 common.Elem) bool {
	if e1 == nil && e2 == nil {
		return true
	}
	if e1 == nil || e2 == nil {
		return false
	}
	return Eqpackag(e1, e2)
}
