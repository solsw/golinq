package main

// generated by github.com/solsw/golinq/typed/typedgen utility

import (
	"reflect"

	"github.com/solsw/golinq/common"
	"github.com/solsw/golinq/enumerable"
	"github.com/solsw/golinq/errors"
)

// Sliceproduct is an alias for []product.
type Sliceproduct = []product

// ElemToproduct converts Elem to product.
// If 'el' is nil, product's zero value is returned.
func ElemToproduct(el common.Elem) (product, error) {
	var r0 product
	if el == nil {
		return r0, nil
	}
	r, ok := el.(product)
	if !ok {
		return r0, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(r))
	}
	return r, nil
}

// SliceproductToSlice converts Sliceproduct to Slice.
func SliceproductToSlice(ts Sliceproduct) common.Slice {
	if ts == nil {
		return nil
	}
	r := make(common.Slice, 0, len(ts))
	for _, t := range ts {
		r = append(r, t)
	}
	return r
}

// SliceproductToEnumerable converts Sliceproduct to Enumerable.
func SliceproductToEnumerable(ts Sliceproduct) *enumerable.Enumerable {
	return enumerable.NewElems(SliceproductToSlice(ts)...)
}

// SliceToSliceproduct converts Slice to Sliceproduct.
func SliceToSliceproduct(sl common.Slice) (Sliceproduct, error) {
	if sl == nil {
		return nil, nil
	}
	r := make(Sliceproduct, 0, len(sl))
	for _, el := range sl {
		t, ok := el.(product)
		if !ok {
			return nil, errors.WrongType(reflect.TypeOf(el), reflect.TypeOf(t))
		}
		r = append(r, t)
	}
	return r, nil
}

// EnumerableToSliceproduct converts Enumerable to Sliceproduct.
func EnumerableToSliceproduct(en *enumerable.Enumerable) (Sliceproduct, error) {
	return SliceToSliceproduct(en.Slice())
}

// Eqproduct is an Equality for product.
var Eqproduct = func(e1, e2 common.Elem) bool {
	// use the appropiate one or implement your own
	return reflect.DeepEqual(e1, e2)
	// return reflect.DeepEqual(e1.(product), e2.(product))
	// return e1.(product) == e2.(product)
}

// EqNilproduct is an Equality for product, respecting nil parameters.
var EqNilproduct = func(e1, e2 common.Elem) bool {
	if e1 == nil && e2 == nil {
		return true
	}
	if e1 == nil || e2 == nil {
		return false
	}
	return Eqproduct(e1, e2)
}
